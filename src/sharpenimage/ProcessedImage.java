/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sharpenimage;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;

/**
 *
 * @author dtno1
 */
public class ProcessedImage extends javax.swing.JPanel {

    BufferedImage img;
    int[][][] rgb_buffer;

    /**
     * Creates new form ProcessedImage
     */
    public ProcessedImage() {
        initComponents();
        img = null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void LoadImage(String filePath) {
        try {
            img = ImageIO.read(new File(filePath));
            rgb_buffer = new int[3][img.getHeight()][img.getWidth()];
        } catch (IOException ex) {
            Logger.getLogger(OriginalPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void readImagePixels() {
        for (int row = 0; row < img.getHeight(); row++) {
            for (int col = 0; col < img.getHeight(); col++) {
                Color c = new Color(img.getRGB(col, row));
                rgb_buffer[0][row][col] = c.getRed();
                rgb_buffer[1][row][col] = c.getGreen();
                rgb_buffer[2][row][col] = c.getBlue();
            }
        }
    }

    public void smoothImage() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                readImagePixels();
                for (int row = 1; row < img.getHeight()-1; row++) {
                    for (int col = 1; col < img.getHeight()-1; col++) {
                        int r =rgb_buffer[0][row-1][col-1]+
                                rgb_buffer[0][row-1][col]+
                                rgb_buffer[0][row-1][col+1]+
                                
                                rgb_buffer[0][row][col-1]+
                                rgb_buffer[0][row][col]+
                                rgb_buffer[0][row][col+1]+
                                
                                rgb_buffer[0][row+1][col-1]+
                                rgb_buffer[0][row+1][col]+
                                rgb_buffer[0][row+1][col+1];
                        
                         int g =rgb_buffer[1][row-1][col-1]+
                                rgb_buffer[1][row-1][col]+
                                rgb_buffer[1][row-1][col+1]+
                                
                                rgb_buffer[1][row][col-1]+
                                rgb_buffer[1][row][col]+
                                rgb_buffer[1][row][col+1]+
                                
                                rgb_buffer[1][row+1][col-1]+
                                rgb_buffer[1][row+1][col]+
                                rgb_buffer[1][row+1][col+1];
                         
                         
                          int b =rgb_buffer[2][row-1][col-1]+
                                rgb_buffer[2][row-1][col]+
                                rgb_buffer[2][row-1][col+1]+
                                
                                rgb_buffer[2][row][col-1]+
                                rgb_buffer[2][row][col]+
                                rgb_buffer[2][row][col+1]+
                                
                                rgb_buffer[2][row+1][col-1]+
                                rgb_buffer[2][row+1][col]+
                                rgb_buffer[2][row+1][col+1];
                          
                          Color c = new Color(r/9, g/9, b/9);
                          img.setRGB(col, row, c.getRGB());
                    }
                }
                repaint();
            }
        }).start();
    }
    public void sharpeningImage() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                readImagePixels();
                for (int row = 1; row < img.getHeight()-2; row++) {
                    for (int col = 1; col < img.getHeight()-2; col++) {
                        int r=0,g=0,b=0;
                        r = (int) (rgb_buffer[0][row][col]+0.5*(rgb_buffer[0][row][col]-rgb_buffer[0][row-1][col-1]));
                        g = (int) (rgb_buffer[1][row][col]+0.5*(rgb_buffer[1][row][col]-rgb_buffer[1][row-1][col-1]));
                        b = (int) (rgb_buffer[2][row][col]+0.5*(rgb_buffer[2][row][col]-rgb_buffer[2][row-1][col-1]));
                        
                        if(r>255){
                            r=255;
                        }
                        if(r<0){
                            r=0;
                        }
                        if(g>255){
                            g=255;
                        }
                        if(g<0){
                            g=0;
                        }
                        if(b>255){
                            b=255;
                        }
                        if(b<0){
                            b=0;
                        }
                        Color c = new Color(r,g,b);
                        img.setRGB(col, row, c.getRGB());
                    }
                }
                repaint();
            }
        }).start();
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g); //To change body of generated methods, choose Tools | Templates.
        if (img != null) {
            g.drawImage(img, 0, 0, null);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
